[{"body":"","link":"https://blog.vcokltfre.dev/random/","title":"Randoms"},{"body":"Formatting Syntax All elements within {} will be interpreted as tag code, rather than raw text, for example {args.0} will format the tag with the first given argument.\nVariables args can be used with dot access with an integer to access the argument at that index:\n {args.0} {args.n}  user can be used with dot access with a string to access user details:\n {user.username} - e.g. vcokltfre {user.id} - e.g. 297045071457681409 {user.discriminator} - e.g. 6868 {user.bot} - e.g. false {user.system} - e.g. false {user.publicFlags} - e.g. 256  member can be used with dot access with a string to access member details:\n {member.user} - A user as described above.  Example usage: {member.user.username}   {member.joinedAt} - e.g. 1607803386491  Functions eq Checks if all the given arguments are equal.\nSyntax: eq(*args)\nExample: eq(user.id, \u0026quot;297045071457681409\u0026quot;)\ngt Checks if the first argument is greater than the second.\nSyntax: gt(arg1, arg2)\nExample: gt(10, 5)\ngte Checks if the first argument is greater than or equal to the second.\nSyntax: gte(arg1, arg2)\nExample: gte(10, 5)\nlt Checks if the first argument is less than the second.\nSyntax: lt(arg1, arg2)\nExample: lt(3, 5)\nlte Checks if the first argument is less than or equal to the second.\nSyntax: lte(arg1, arg2)\nExample: lte(3, 5)\nand Checks if all the given arguemts evaluate to true.\nSyntax: and(*args)\nExample: and(lt(5, 10), gt(10, 5))\nor Checks if any of the given arguments evaluate to true.\nSyntax: or(*args)\nExample: or(lt(10, 5), lt(5, 10))\nnot Returns the opposite of the given input. true becomes false and false becomes true.\nSyntax: not(arg)\nExample: not(lt(5, 3))\nif Does something if the clause evaluates to true else do something else.\nSyntax: if(clause, do, else)\nExample: if(eq(user.id, \u0026quot;297045071457681409\u0026quot;), \u0026quot;Hello!\u0026quot;, \u0026quot;Bye.\u0026quot;)\nadd Adds all the given arguments together.\nSyntax: add(*args)\nExample: add(1, 2, 3)\nsub (needs clarification) Subtracts all the given arguments.\nSyntax: sub(*args)\nExample: sub(7, 4)\nmul Multiplies all the given arguments together.\nSyntax: mul(*args)\nExample: mul(5, 6)\ndiv (needs clarification) Divides all the given arguments.\nSyntax: div(*args)\nExample: div(15, 3)\nslice Gets a slice of a given string.\nSyntax: slice(string, start, end)\nExample: slice(\u0026quot;Hello!\u0026quot;, 1, 4)\nlower Gets the lowercase version of a given string.\nSyntax: lower(string)\nExample: lower(\u0026quot;Hello\u0026quot;)\nupper Gets the uppercase version of a given string.\nSyntax: upper(string)\nExample: upper(\u0026quot;Hello\u0026quot;)\nupperFirst | ucfirst Gets the string with an uppercase first letter.\nSyntax: upperFirst(string)\nExample: upperFirst(\u0026quot;dragory\u0026quot;)\nrand Gets a random number with an optional seed in a given range.\nSyntax: rand(from, to[, seed=null])\nExample: rand(0, 10)\ncases Selects a single item by index from the given arguments.\nSyntax: cases(mod, *cases)\nExample: cases(1, \u0026quot;zero\u0026quot;, \u0026quot;one\u0026quot;, \u0026quot;two\u0026quot;)\nchoice Gets a random item from the given arguments.\nSyntax: choice(*args)\nExample: choice(\u0026quot;Yes\u0026quot;, \u0026quot;No\u0026quot;, \u0026quot;Maybe\u0026quot;)\nisMention Returns whether the given input is a mention.\nSyntax: isMention(string)\nExample: isMention(\u0026quot;\u0026lt;@297045071457681409\u0026gt;\u0026quot;)\ntag Gets the content of another tag, passing the provided subargs.\nSyntax: tag(name, *subargs)\nExample: tag(\u0026quot;test\u0026quot;)\nset Sets an ephemeral variable to a given value.\nSyntax: set(name, value)\nExample: set(\u0026quot;test\u0026quot;, 1)\nget Gets the value of an ephemeral variable.\nSyntax: get(name)\nExample: get(\u0026quot;test\u0026quot;)\nsetr Sets an ephemeral variable to a given value and returns the result.\nSyntax: setr(name, value)\nExample: setr(\u0026quot;test\u0026quot;, 1)\nExamples Soon:tm:\n","link":"https://blog.vcokltfre.dev/random/tagdoc/","title":"Zeppelin Tag Reference"},{"body":"I get asked how I'm supposed to pronounce my name a lot, and the story behind it, so here it is.\nFirst, pronunciation: each letter, said one after another, v-c-o-k-l-t-f-r-e.\nNext, the backstory: although it looks random it's less random than it seems, although it is still, to an extent, random. The letters are actually grouped together on a normal qwerty keyboard, vc okl tfre are all near eachother. That's all the backstory. It's not an elaborate joke of some sort, as much as I'd like that, just simply random-but-not-that-random letters.\n","link":"https://blog.vcokltfre.dev/name/","title":"The Name"},{"body":"vcokltfre's blog Hey! Welcome to my blog site, here I occasionally post updates and information about things I'm interested in, usually technology related!\nWho am I? I'm a software developer from the UK, usually creating Discord bots, APIs, and generally other random backend services. I use Python for the majority of my projects, and FastAPI for the APIs, and for making Discord bots I use discord.py, and have made a tutorial about how to use it here.\nI moderate a few Discord servers, and develop bots for some of them, including Minecraft@Home and GTA Online.\nSome slightly notable things I've made, or helped to make:\n My discord.py tutorial Magoji Bot ResearchBot MessageSafe  ","link":"https://blog.vcokltfre.dev/","title":"vcokltfre's blog"}]